package com.example.demo.test;


import org.hibernate.Session;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import com.google.gson.JsonObject;
@RestController // This means that this class is a Controller
@RequestMapping(path="/Home") // This means URL's start with /demo (after Application path)
public class UserController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;
  private Session session;
  @PostMapping(path="/Registration") // Map ONLY POST Requests
  public ResponseEntity<User>  addNewUser (@RequestBody User user) throws Exception {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST reques
	  if(!userRepository.findByUsername(user.getUsername()).isEmpty()){
		  
		  return new ResponseEntity(new User(),HttpStatus.CONFLICT);
	  }
	  
	  User newUser = userRepository.save(user);
	  
	  return new ResponseEntity<User>(newUser,HttpStatus.OK);

  }

  @GetMapping(path="/all")

    // This returns a JSON or XML with the users
   
}
